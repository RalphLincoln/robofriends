{"version":3,"sources":["reducers.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","actions.js","constants.js","Components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","SearchBox","searchChange","className","type","placeholder","onChange","Card","users","map","user","key","id","src","alt","name","email","CardList","props","this","onRequestRobots","onSearchChange","filteredUsers","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","ErrorBoundary","hasError","info","setState","children","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.075cb1df.chunk.js","sourcesContent":["\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react'\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                type=\"search\"\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                placeholder='Search Robot'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from \"react\";\r\n\r\nconst Card = ({ users }) => {\r\n  return (\r\n    <>\r\n      {\r\n        users.map(user => (\r\n          <div key={user.id} className='bg-light-green center dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${user.id}?200x200`} alt=\"robot images\" />\r\n            <div>\r\n              <h2>{user.name}</h2>\r\n              <p>{user.email}</p>\r\n            </div>\r\n          </div>))\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport SearchBox from './SearchBox'\r\n\r\nimport Card from './Card';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\nclass CardList extends Component {\r\n\r\n\r\n    componentDidMount(props) {\r\n        this.props.onRequestRobots()\r\n    }\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props\r\n        const filteredUsers = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Card users={filteredUsers} />\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardList);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.hasError) {\r\n            return <h1>Opssssssss, Something happened</h1>\r\n        }\r\n        return (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport CardList from \"./Components/CardList\";\r\n\r\nimport './App.css'\r\nimport ErrorBoundary from \"./Components/ErrorBoundary\";\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='tc'>\r\n      <h1>RoboFriends</h1>\r\n      <ErrorBoundary>\r\n        <CardList />\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// IMPORTING REDUX RELATED STUFF\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}